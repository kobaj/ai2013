************
* Exploits *
************

1. You can change all public static variables, including Toroidal2DPhysics.MAX_TRANSLATIONAL_VELOCITY, or fun things like as.MONEY_DENSITY.

fix: set all public static variables to final

2. Toroidal2DPhysics checkTranslationalVelocity checks x and y independently. A ship can move twice as fast accross space by moving only in diagonals.

fix: 

private double checkTranslationalVelocity(double tran_x_vel, double tran_y_vel, double angle) {
		
		//get x and y dependency
		double translational_velocity = tran_x_vel * Math.cos(angle) + tran_y_vel(angle);
		if(translational_velocity > MAX_TRANSLATIONAL_VELOCTY)
		{
			//find out how much they are over
			double percent = translational_velocity / MAX_TRANSLATIONAL_VELOCITY;
			tran_x_vel /= percent;
			tran_y_vel /= percent;
			
			//you'll have to figure out a way to return these
		}
	}



************
*   Bugs   *
************


1. Concurrent modification of JSpacewarComponent line 74 Occurs when using LineShadow (like, 40 thousand of them).
StackTrace
 [java] Exception in thread "AWT-EventQueue-0" java.util.ConcurrentModificationException
     [java] 	at java.util.ArrayList$Itr.checkForComodification(Unknown Source)
     [java] 	at java.util.ArrayList$Itr.next(Unknown Source)
     [java] 	at spacewar2.gui.JSpacewarComponent.paintComponent(JSpacewarComponent.java:74)
     [java] 	at javax.swing.JComponent.paint(Unknown Source)
     [java] 	at javax.swing.JComponent.paintChildren(Unknown Source)
     [java] 	at javax.swing.JComponent.paint(Unknown Source)
     [java] 	at javax.swing.JComponent.paintChildren(Unknown Source)
     [java] 	at javax.swing.JComponent.paint(Unknown Source)
     [java] 	at javax.swing.JComponent.paintChildren(Unknown Source)
     [java] 	at javax.swing.JComponent.paint(Unknown Source)
     [java] 	at javax.swing.JLayeredPane.paint(Unknown Source)
     [java] 	at javax.swing.JComponent.paintChildren(Unknown Source)
     [java] 	at javax.swing.JComponent.paintToOffscreen(Unknown Source)
     [java] 	at javax.swing.RepaintManager$PaintManager.paintDoubleBuffered(Unknown Source)
     [java] 	at javax.swing.RepaintManager$PaintManager.paint(Unknown Source)
     [java] 	at javax.swing.RepaintManager.paint(Unknown Source)
     [java] 	at javax.swing.JComponent.paint(Unknown Source)
     [java] 	at java.awt.GraphicsCallback$PaintCallback.run(Unknown Source)
     [java] 	at sun.awt.SunGraphicsCallback.runOneComponent(Unknown Source)
     [java] 	at sun.awt.SunGraphicsCallback.runComponents(Unknown Source)
     [java] 	at java.awt.Container.paint(Unknown Source)
     [java] 	at java.awt.Window.paint(Unknown Source)
     [java] 	at javax.swing.RepaintManager.paintDirtyRegions(Unknown Source)
     [java] 	at javax.swing.RepaintManager.paintDirtyRegions(Unknown Source)
     [java] 	at javax.swing.RepaintManager.prePaintDirtyRegions(Unknown Source)
     [java] 	at javax.swing.RepaintManager.access$700(Unknown Source)
     [java] 	at javax.swing.RepaintManager$ProcessingRunnable.run(Unknown Source)
     [java] 	at java.awt.event.InvocationEvent.dispatch(Unknown Source)
     [java] 	at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
     [java] 	at java.awt.EventQueue.access$200(Unknown Source)
     [java] 	at java.awt.EventQueue$3.run(Unknown Source)
     [java] 	at java.awt.EventQueue$3.run(Unknown Source)
     [java] 	at java.security.AccessController.doPrivileged(Native Method)
     [java] 	at java.security.ProtectionDomain$1.doIntersectionPrivilege(Unknown Source)
     [java] 	at java.awt.EventQueue.dispatchEvent(Unknown Source)
     [java] 	at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)
     [java] 	at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)
     [java] 	at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)
     [java] 	at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
     [java] 	at java.awt.EventDispatchThread.pumpEvents(Unknown Source)
     [java] 	at java.awt.EventDispatchThread.run(Unknown Source)

fix: clone shadows or replace chunk of code from line 74 in jSpacewarComponent with 

  for(int i = allShadows.size() - 1; i >= 0; i--)
        	if(allShadows.get(i) != null && allShadows.get(i).isDrawable())
        		drawShadow(allShadows.get(i), graphics);

2. TeamClient random is not accessible.

fix: change Random random to protected Random random on line 37.


************
* Requests *
************

1. The ability to find if a square area is empty or not, 
eg isLocationFree(double top_left, double top_right, double bottom_right, double bottom_left)
	{
		// the doubles form the verticies of a square 
		// and the game will tell you if there is an object intersecting with that square
	}

2. The ability to know the gamefield resolution.

3. the ability to know how much time is left.